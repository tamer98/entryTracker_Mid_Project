name: EntryTracker CI/CD
on:
  push:
    branches:
      - main
jobs:
  CI:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Check out code and pull
        uses: actions/checkout@v2


      - name: install dependencies and Build the application
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          python app.py &

      - name: wait for server to be upload
        run: sleep 5

      - name: Run tests
        run: |
          curl http://localhost:5000




  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-south-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, Tag, and Push the Image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: entry-tracker
  #         IMAGE_TAG: latest
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  # CD:
  #     needs: CI
  #     runs-on: ubuntu-latest
  #     timeout-minutes: 5
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v3

  #       - name: Deploy to EC2
  #         uses: easingthemes/ssh-deploy@main
  #         env:
  #             SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  #             HOST: ${{ secrets.HOST_DNS }}
  #             USER: ${{ secrets.USERNAME }}
  #             TARGET: ${{ secrets.TARGET_DIR }}
              
  #             run: |
  #               echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
  #               ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
                
  #               #install docker and docker compose 
  #               sudo apt update
  #               sudo apt install -y docker.io
  #               sudo systemctl start docker
  #               sudo systemctl enable docker
  #               sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #               sudo chmod +x /usr/local/bin/docker-compose
  #               docker-compose --version

  #               #Clean previous images and containers
  #               docker system prune -f
   
  #               # Set environment variables
  #               export DB_HOST=mysql
  #               export DB_USER=root
  #               export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
  #               export DB_NAME=entrytracker

  #               #goes where files located
  #               cd ${{ secrets.TARGET_DIR }}

  #               # # Pull the latest image from ECR
  #               docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
              
  #               # #start application by running docker compose
  #               docker compose up -d
      
